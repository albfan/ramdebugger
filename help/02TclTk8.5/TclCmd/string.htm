<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>string manual page - Tcl Built-In Commands</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl8.5.1/Tk8.5.1 Documentation</a> <small>&gt;</small> <a href="contents.htm">TclCmd</a> <small>&gt;</small> string</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl/Tk Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TkCmd/contents.htm">Tk Commands</A> | <A HREF="../TclLib/contents.htm">Tcl Library</A> | <A HREF="../TkLib/contents.htm">Tk Library</A></H3>
<DL>
<DD><A HREF="string.htm#M2" NAME="L1516">NAME</A>
<DL><DD>string - Manipulate strings</DD></DL>
<DD><A HREF="string.htm#M3" NAME="L1517">SYNOPSIS</A>
<DL>
</DL>
<DD><A HREF="string.htm#M4" NAME="L1518">DESCRIPTION</A>
<DL class="description">
<DD><A HREF="string.htm#M5" NAME="L1519"><B>string bytelength </B><I>string</I></A>
<DD><A HREF="string.htm#M6" NAME="L1520"><B>string compare</B> ?<B>-nocase</B>? ?<B>-length int</B>? <I>string1 string2</I></A>
<DD><A HREF="string.htm#M7" NAME="L1521"><B>string equal</B> ?<B>-nocase</B>? ?<B>-length int</B>? <I>string1 string2</I></A>
<DD><A HREF="string.htm#M8" NAME="L1522"><B>string first </B><I>needleString haystackString</I> ?<I>startIndex</I>?</A>
<DD><A HREF="string.htm#M9" NAME="L1523"><B>string index </B><I>string charIndex</I></A>
<DL class="description">
<DD><A HREF="string.htm#M10" NAME="L1524"><I>integer</I></A>
<DD><A HREF="string.htm#M11" NAME="L1525"><B>end</B></A>
<DD><A HREF="string.htm#M12" NAME="L1526"><B>end</B>-<I>N</I></A>
<DD><A HREF="string.htm#M13" NAME="L1527"><B>end</B>+<I>N</I></A>
<DD><A HREF="string.htm#M14" NAME="L1528"><I>M</I>+<I>N</I></A>
<DD><A HREF="string.htm#M15" NAME="L1529"><I>M</I>-<I>N</I></A>
</DL>
<DD><A HREF="string.htm#M16" NAME="L1530"><B>string is </B><I>class</I> ?<B>-strict</B>? ?<B>-failindex </B><I>varname</I>? <I>string</I></A>
<DL class="description">
<DD><A HREF="string.htm#M17" NAME="L1531"><B>alnum</B></A>
<DD><A HREF="string.htm#M18" NAME="L1532"><B>alpha</B></A>
<DD><A HREF="string.htm#M19" NAME="L1533"><B>ascii</B></A>
<DD><A HREF="string.htm#M20" NAME="L1534"><B>boolean</B></A>
<DD><A HREF="string.htm#M21" NAME="L1535"><B>control</B></A>
<DD><A HREF="string.htm#M22" NAME="L1536"><B>digit</B></A>
<DD><A HREF="string.htm#M23" NAME="L1537"><B>double</B></A>
<DD><A HREF="string.htm#M24" NAME="L1538"><B>false</B></A>
<DD><A HREF="string.htm#M25" NAME="L1539"><B>graph</B></A>
<DD><A HREF="string.htm#M26" NAME="L1540"><B>integer</B></A>
<DD><A HREF="string.htm#M27" NAME="L1541"><B>list</B></A>
<DD><A HREF="string.htm#M28" NAME="L1542"><B>lower</B></A>
<DD><A HREF="string.htm#M29" NAME="L1543"><B>print</B></A>
<DD><A HREF="string.htm#M30" NAME="L1544"><B>punct</B></A>
<DD><A HREF="string.htm#M31" NAME="L1545"><B>space</B></A>
<DD><A HREF="string.htm#M32" NAME="L1546"><B>true</B></A>
<DD><A HREF="string.htm#M33" NAME="L1547"><B>upper</B></A>
<DD><A HREF="string.htm#M34" NAME="L1548"><B>wideinteger</B></A>
<DD><A HREF="string.htm#M35" NAME="L1549"><B>wordchar</B></A>
<DD><A HREF="string.htm#M36" NAME="L1550"><B>xdigit</B></A>
</DL>
<DD><A HREF="string.htm#M37" NAME="L1551"><B>string last </B><I>needleString haystackString</I> ?<I>lastIndex</I>?</A>
<DD><A HREF="string.htm#M38" NAME="L1552"><B>string length </B><I>string</I></A>
<DD><A HREF="string.htm#M39" NAME="L1553"><B>string map</B> ?<B>-nocase</B>? <I>mapping string</I></A>
<DD><A HREF="string.htm#M40" NAME="L1554"><B>string match</B> ?<B>-nocase</B>? <I>pattern</I> <I>string</I></A>
<DL class="description">
<DD><A HREF="string.htm#M41" NAME="L1555"><B>*</B></A>
<DD><A HREF="string.htm#M42" NAME="L1556"><B>?</B></A>
<DD><A HREF="string.htm#M43" NAME="L1557"><B>[</B><I>chars</I><B>]</B></A>
<DD><A HREF="string.htm#M44" NAME="L1558"><B>&#92;</B><I>x</I></A>
</DL>
<DD><A HREF="string.htm#M45" NAME="L1559"><B>string range </B><I>string first last</I></A>
<DD><A HREF="string.htm#M46" NAME="L1560"><B>string repeat </B><I>string count</I></A>
<DD><A HREF="string.htm#M47" NAME="L1561"><B>string replace </B><I>string first last</I> ?<I>newstring</I>?</A>
<DD><A HREF="string.htm#M48" NAME="L1562"><B>string reverse </B><I>string</I></A>
<DD><A HREF="string.htm#M49" NAME="L1563"><B>string tolower </B><I>string</I> ?<I>first</I>? ?<I>last</I>?</A>
<DD><A HREF="string.htm#M50" NAME="L1564"><B>string totitle </B><I>string</I> ?<I>first</I>? ?<I>last</I>?</A>
<DD><A HREF="string.htm#M51" NAME="L1565"><B>string toupper </B><I>string</I> ?<I>first</I>? ?<I>last</I>?</A>
<DD><A HREF="string.htm#M52" NAME="L1566"><B>string trim </B><I>string</I> ?<I>chars</I>?</A>
<DD><A HREF="string.htm#M53" NAME="L1567"><B>string trimleft </B><I>string</I> ?<I>chars</I>?</A>
<DD><A HREF="string.htm#M54" NAME="L1568"><B>string trimright </B><I>string</I> ?<I>chars</I>?</A>
<DD><A HREF="string.htm#M55" NAME="L1569"><B>string wordend </B><I>string charIndex</I></A>
<DD><A HREF="string.htm#M56" NAME="L1570"><B>string wordstart </B><I>string charIndex</I></A>
</DL>
<DD><A HREF="string.htm#M57" NAME="L1571">EXAMPLE</A>
<DD><A HREF="string.htm#M58" NAME="L1572">SEE ALSO</A>
<DD><A HREF="string.htm#M59" NAME="L1573">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
string - Manipulate strings
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>string </B><I>option arg </I>?<I>arg ...?</I><BR>
<H3><A NAME="M4">DESCRIPTION</A></H3>
Performs one of several string operations, depending on <I>option</I>.
The legal <I>option</I>s (which may be abbreviated) are:
<P>
<DL class="description">
<DT><A NAME="M5"><B>string bytelength </B><I>string</I></A><DD>
Returns a decimal string giving the number of bytes used to represent
<I>string</I> in memory.  Because UTF-8 uses one to three bytes to
represent Unicode characters, the byte length will not be the same as
the character length in general.  The cases where a script cares about
the byte length are rare.  In almost all cases, you should use the
<B>string length</B> operation (including determining the length of a
Tcl ByteArray object).  Refer to the <B><A HREF="../TclLib/Utf.htm">Tcl_NumUtfChars</A></B> manual
entry for more details on the UTF-8 representation.
<P><DT><A NAME="M6"><B>string compare</B> ?<B>-nocase</B>? ?<B>-length int</B>? <I>string1 string2</I></A><DD>
Perform a character-by-character comparison of strings <I>string1</I>
and <I>string2</I>.  Returns -1, 0, or 1, depending on whether
<I>string1</I> is lexicographically less than, equal to, or greater
than <I>string2</I>.  If <B>-length</B> is specified, then only the
first <I>length</I> characters are used in the comparison.  If
<B>-length</B> is negative, it is ignored.  If <B>-nocase</B> is
specified, then the strings are compared in a case-insensitive manner.
<P><DT><A NAME="M7"><B>string equal</B> ?<B>-nocase</B>? ?<B>-length int</B>? <I>string1 string2</I></A><DD>
Perform a character-by-character comparison of strings <I>string1</I>
and <I>string2</I>.  Returns 1 if <I>string1</I> and <I>string2</I> are
identical, or 0 when not.  If <B>-length</B> is specified, then only
the first <I>length</I> characters are used in the comparison.  If
<B>-length</B> is negative, it is ignored.  If <B>-nocase</B> is
specified, then the strings are compared in a case-insensitive manner.
<P><DT><A NAME="M8"><B>string first </B><I>needleString haystackString</I> ?<I>startIndex</I>?</A><DD>
Search <I>haystackString</I> for a sequence of characters that exactly match
the characters in <I>needleString</I>.  If found, return the index of the
first character in the first such match within <I>haystackString</I>.  If not
found, return -1.  If <I>startIndex</I> is specified (in any of the
forms accepted by the <B>index</B> method), then the search is
constrained to start with the character in <I>haystackString</I> specified by
the index.  For example,
<PRE><B>string first a 0a23456789abcdef 5</B></PRE>
will return <B>10</B>, but
<PRE><B>string first a 0123456789abcdef 11</B></PRE>
will return <B>-1</B>.
<P><DT><A NAME="M9"><B>string index </B><I>string charIndex</I></A><DD>
Returns the <I>charIndex</I>'th character of the <I>string</I> argument.
A <I>charIndex</I> of 0 corresponds to the first character of the
string.  <I>charIndex</I> may be specified as follows:
<P>
<DL class="description">
<DT><A NAME="M10"><I>integer</I></A><DD>
For any index value that passes <B>string is integer -strict</B>,
the char specified at this integral index
(e.g. <B>2</B> would refer to the
&#8220;c&#8221;
in
&#8220;abcd&#8221;).
<P><DT><A NAME="M11"><B>end</B></A><DD>
The last char of the string
(e.g. <B>end</B> would refer to the
&#8220;d&#8221;
in
&#8220;abcd&#8221;).
<P><DT><A NAME="M12"><B>end</B>-<I>N</I></A><DD>
The last char of the string minus the specified integer offset <I>N</I>
(e.g. <B>end</B>-1 would refer to the
&#8220;c&#8221;
in
&#8220;abcd&#8221;).
<P><DT><A NAME="M13"><B>end</B>+<I>N</I></A><DD>
The last char of the string plus the specified integer offset <I>N</I>
(e.g. <B>end</B>+-1 would refer to the
&#8220;c&#8221;
in
&#8220;abcd&#8221;).
<P><DT><A NAME="M14"><I>M</I>+<I>N</I></A><DD>
The char specified at the integral index that is the sum of 
integer values <I>M</I> and <I>N</I>
(e.g. <B>1+1</B> would refer to the
&#8220;c&#8221;
in
&#8220;abcd&#8221;).
<P><DT><A NAME="M15"><I>M</I>-<I>N</I></A><DD>
The char specified at the integral index that is the difference of 
integer values <I>M</I> and <I>N</I>
(e.g. <B>2-1</B> would refer to the
&#8220;b&#8221;
in
&#8220;abcd&#8221;).
<P></DL>
<DL><DD>
<P>
In the specifications above, the integer value <I>M</I> contains no
trailing whitespace and the integer value <I>N</I> contains no
leading whitespace.
<P>
If <I>charIndex</I> is less than 0 or greater than or equal to the
length of the string then this command returns an empty string.
</DL>
<P><DT><A NAME="M16"><B>string is </B><I>class</I> ?<B>-strict</B>? ?<B>-failindex </B><I>varname</I>? <I>string</I></A><DD>
Returns 1 if <I>string</I> is a valid member of the specified character
class, otherwise returns 0.  If <B>-strict</B> is specified, then an
empty string returns 0, otherwise an empty string will return 1 on
any class.  If <B>-failindex</B> is specified, then if the function
returns 0, the index in the string where the class was no longer valid
will be stored in the variable named <I>varname</I>.  The <I>varname</I>
will not be set if the function returns 1.  The following character
classes are recognized (the class name can be abbreviated):
<P>
<DL class="description">
<DT><A NAME="M17"><B>alnum</B></A><DD>
Any Unicode alphabet or digit character.
<P><DT><A NAME="M18"><B>alpha</B></A><DD>
Any Unicode alphabet character.
<P><DT><A NAME="M19"><B>ascii</B></A><DD>
Any character with a value less than &#92;u0080 (those that are in the
7-bit ascii range).
<P><DT><A NAME="M20"><B>boolean</B></A><DD>
Any of the forms allowed to <B><A HREF="../TclLib/GetInt.htm">Tcl_GetBoolean</A></B>.
<P><DT><A NAME="M21"><B>control</B></A><DD>
Any Unicode control character.
<P><DT><A NAME="M22"><B>digit</B></A><DD>
Any Unicode digit character.  Note that this includes characters
outside of the [0-9] range.
<P><DT><A NAME="M23"><B>double</B></A><DD>
Any of the valid forms for a double in Tcl, with optional surrounding
whitespace.  In case of under/overflow in the value, 0 is returned and
the <I>varname</I> will contain -1.
<P><DT><A NAME="M24"><B>false</B></A><DD>
Any of the forms allowed to <B><A HREF="../TclLib/GetInt.htm">Tcl_GetBoolean</A></B> where the value is
false.
<P><DT><A NAME="M25"><B>graph</B></A><DD>
Any Unicode printing character, except space.
<P><DT><A NAME="M26"><B>integer</B></A><DD>
Any of the valid string formats for a 32-bit integer value in Tcl,
with optional surrounding whitespace.  In case of under/overflow in
the value, 0 is returned and the <I>varname</I> will contain -1.
<P><DT><A NAME="M27"><B>list</B></A><DD>
Any proper list structure, with optional surrounding whitespace. In
case of improper list structure, 0 is returned and the <I>varname</I>
will contain the index of the
&#8220;element&#8221;
where the list parsing fails, or -1 if this cannot be determined.
<P><DT><A NAME="M28"><B>lower</B></A><DD>
Any Unicode lower case alphabet character.
<P><DT><A NAME="M29"><B>print</B></A><DD>
Any Unicode printing character, including space.
<P><DT><A NAME="M30"><B>punct</B></A><DD>
Any Unicode punctuation character.
<P><DT><A NAME="M31"><B>space</B></A><DD>
Any Unicode space character.
<P><DT><A NAME="M32"><B>true</B></A><DD>
Any of the forms allowed to <B><A HREF="../TclLib/GetInt.htm">Tcl_GetBoolean</A></B> where the value is
true.
<P><DT><A NAME="M33"><B>upper</B></A><DD>
Any upper case alphabet character in the Unicode character set.
<P><DT><A NAME="M34"><B>wideinteger</B></A><DD>
Any of the valid forms for a wide integer in Tcl, with optional
surrounding whitespace.  In case of under/overflow in the value, 0 is
returned and the <I>varname</I> will contain -1.
<P><DT><A NAME="M35"><B>wordchar</B></A><DD>
Any Unicode word character.  That is any alphanumeric character, and
any Unicode connector punctuation characters (e.g. underscore).
<P><DT><A NAME="M36"><B>xdigit</B></A><DD>
Any hexadecimal digit character ([0-9A-Fa-f]).
</DL><P>In the case of <B>boolean</B>, <B>true</B> and <B>false</B>, if the
function will return 0, then the <I>varname</I> will always be set to
0, due to the varied nature of a valid boolean value.<DL>
</DL>
<P><DT><A NAME="M37"><B>string last </B><I>needleString haystackString</I> ?<I>lastIndex</I>?</A><DD>
Search <I>haystackString</I> for a sequence of characters that exactly match
the characters in <I>needleString</I>.  If found, return the index of the
first character in the last such match within <I>haystackString</I>.  If there
is no match, then return -1.  If <I>lastIndex</I> is specified (in any
of the forms accepted by the <B>index</B> method), then only the
characters in <I>haystackString</I> at or before the specified <I>lastIndex</I>
will be considered by the search.  For example,
<PRE><B>string last a 0a23456789abcdef 15</B></PRE>
will return <B>10</B>, but
<PRE><B>string last a 0a23456789abcdef 9</B></PRE>
will return <B>1</B>.
<P><DT><A NAME="M38"><B>string length </B><I>string</I></A><DD>
Returns a decimal string giving the number of characters in
<I>string</I>.  Note that this is not necessarily the same as the
number of bytes used to store the string.  If the object is a
ByteArray object (such as those returned from reading a binary encoded
channel), then this will return the actual byte length of the object.
<P><DT><A NAME="M39"><B>string map</B> ?<B>-nocase</B>? <I>mapping string</I></A><DD>
Replaces substrings in <I>string</I> based on the key-value pairs in
<I>mapping</I>.  <I>mapping</I> is a list of <I>key value key value ...</I>
as in the form returned by <B><A HREF="../TclCmd/array.htm">array get</A></B>.  Each instance of a
key in the string will be replaced with its corresponding value.  If
<B>-nocase</B> is specified, then matching is done without regard to
case differences. Both <I>key</I> and <I>value</I> may be multiple
characters.  Replacement is done in an ordered manner, so the key
appearing first in the list will be checked first, and so on.
<I>string</I> is only iterated over once, so earlier key replacements
will have no affect for later key matches.  For example,
<PRE><B>string map {abc 1 ab 2 a 3 1 0} 1abcaababcabababc</B></PRE>
will return the string <B>01321221</B>.
<P>
Note that if an earlier <I>key</I> is a prefix of a later one, it will
completely mask the later one.  So if the previous example is
reordered like this,
<PRE><B>string map {1 0 ab 2 a 3 abc 1} 1abcaababcabababc</B></PRE>
it will return the string <B>02c322c222c</B>.
<P><DT><A NAME="M40"><B>string match</B> ?<B>-nocase</B>? <I>pattern</I> <I>string</I></A><DD>
See if <I>pattern</I> matches <I>string</I>; return 1 if it does, 0 if
it does not.  If <B>-nocase</B> is specified, then the pattern attempts
to match against the string in a case insensitive manner.  For the two
strings to match, their contents must be identical except that the
following special sequences may appear in <I>pattern</I>:
<P>
<DL class="description">
<DT><A NAME="M41"><B>*</B></A><DD>
Matches any sequence of characters in <I>string</I>, including a null
string.
<P><DT><A NAME="M42"><B>?</B></A><DD>
Matches any single character in <I>string</I>.
<P><DT><A NAME="M43"><B>[</B><I>chars</I><B>]</B></A><DD>
Matches any character in the set given by <I>chars</I>.  If a sequence
of the form <I>x</I><B>-</B><I>y</I> appears in <I>chars</I>, then any
character between <I>x</I> and <I>y</I>, inclusive, will match.  When
used with <B>-nocase</B>, the end points of the range are converted to
lower case first.  Whereas {[A-z]} matches
&#8220;_&#8221;
when matching case-sensitively (since
&#8220;_&#8221;
falls between the
&#8220;Z&#8221;
and
&#8220;a&#8221;),
with <B>-nocase</B> this is considered like {[A-Za-z]} (and
probably what was meant in the first place).
<P><DT><A NAME="M44"><B>&#92;</B><I>x</I></A><DD>
Matches the single character <I>x</I>.  This provides a way of avoiding
the special interpretation of the characters <B>*?[]&#92;</B> in
<I>pattern</I>.
<P></DL>
<P><DT><A NAME="M45"><B>string range </B><I>string first last</I></A><DD>
Returns a range of consecutive characters from <I>string</I>, starting
with the character whose index is <I>first</I> and ending with the
character whose index is <I>last</I>. An index of 0 refers to the first
character of the string.  <I>first</I> and <I>last</I> may be specified
as for the <B>index</B> method.  If <I>first</I> is less than zero then
it is treated as if it were zero, and if <I>last</I> is greater than or
equal to the length of the string then it is treated as if it were
<B>end</B>.  If <I>first</I> is greater than <I>last</I> then an empty
string is returned.
<P><DT><A NAME="M46"><B>string repeat </B><I>string count</I></A><DD>
Returns <I>string</I> repeated <I>count</I> number of times.
<P><DT><A NAME="M47"><B>string replace </B><I>string first last</I> ?<I>newstring</I>?</A><DD>
Removes a range of consecutive characters from <I>string</I>, starting
with the character whose index is <I>first</I> and ending with the
character whose index is <I>last</I>.  An index of 0 refers to the
first character of the string.  <I>First</I> and <I>last</I> may be
specified as for the <B>index</B> method.  If <I>newstring</I> is
specified, then it is placed in the removed character range.  If
<I>first</I> is less than zero then it is treated as if it were zero,
and if <I>last</I> is greater than or equal to the length of the string
then it is treated as if it were <B>end</B>.  If <I>first</I> is greater
than <I>last</I> or the length of the initial string, or <I>last</I> is
less than 0, then the initial string is returned untouched.
<P><DT><A NAME="M48"><B>string reverse </B><I>string</I></A><DD>
Returns a string that is the same length as <I>string</I> but with its
characters in the reverse order.
<P><DT><A NAME="M49"><B>string tolower </B><I>string</I> ?<I>first</I>? ?<I>last</I>?</A><DD>
Returns a value equal to <I>string</I> except that all upper (or title)
case letters have been converted to lower case.  If <I>first</I> is
specified, it refers to the first char index in the string to start
modifying.  If <I>last</I> is specified, it refers to the char index in
the string to stop at (inclusive).  <I>first</I> and <I>last</I> may be
specified as for the <B>index</B> method.
<P><DT><A NAME="M50"><B>string totitle </B><I>string</I> ?<I>first</I>? ?<I>last</I>?</A><DD>
Returns a value equal to <I>string</I> except that the first character
in <I>string</I> is converted to its Unicode title case variant (or
upper case if there is no title case variant) and the rest of the
string is converted to lower case.  If <I>first</I> is specified, it
refers to the first char index in the string to start modifying.  If
<I>last</I> is specified, it refers to the char index in the string to
stop at (inclusive).  <I>first</I> and <I>last</I> may be specified as
for the <B>index</B> method.
<P><DT><A NAME="M51"><B>string toupper </B><I>string</I> ?<I>first</I>? ?<I>last</I>?</A><DD>
Returns a value equal to <I>string</I> except that all lower (or title)
case letters have been converted to upper case.  If <I>first</I> is
specified, it refers to the first char index in the string to start
modifying.  If <I>last</I> is specified, it refers to the char index in
the string to stop at (inclusive).  <I>first</I> and <I>last</I> may be
specified as for the <B>index</B> method.
<P><DT><A NAME="M52"><B>string trim </B><I>string</I> ?<I>chars</I>?</A><DD>
Returns a value equal to <I>string</I> except that any leading or
trailing characters present in the string given by <I>chars</I> are removed.  If
<I>chars</I> is not specified then white space is removed (spaces,
tabs, newlines, and carriage returns).
<P><DT><A NAME="M53"><B>string trimleft </B><I>string</I> ?<I>chars</I>?</A><DD>
Returns a value equal to <I>string</I> except that any leading
characters present in the string given by <I>chars</I> are removed.  If
<I>chars</I> is not specified then white space is removed (spaces,
tabs, newlines, and carriage returns).
<P><DT><A NAME="M54"><B>string trimright </B><I>string</I> ?<I>chars</I>?</A><DD>
Returns a value equal to <I>string</I> except that any trailing
characters present in the string given by <I>chars</I> are removed.  If
<I>chars</I> is not specified then white space is removed (spaces,
tabs, newlines, and carriage returns).
<P><DT><A NAME="M55"><B>string wordend </B><I>string charIndex</I></A><DD>
Returns the index of the character just after the last one in the word
containing character <I>charIndex</I> of <I>string</I>.  <I>charIndex</I>
may be specified as for the <B>index</B> method.  A word is
considered to be any contiguous range of alphanumeric (Unicode letters
or decimal digits) or underscore (Unicode connector punctuation)
characters, or any single character other than these.
<P><DT><A NAME="M56"><B>string wordstart </B><I>string charIndex</I></A><DD>
Returns the index of the first character in the word containing
character <I>charIndex</I> of <I>string</I>.  <I>charIndex</I> may be
specified as for the <B>index</B> method.  A word is considered to be any
contiguous range of alphanumeric (Unicode letters or decimal digits)
or underscore (Unicode connector punctuation) characters, or any
single character other than these.
<P></DL>
<H3><A NAME="M57">EXAMPLE</A></H3>
Test if the string in the variable <I>string</I> is a proper non-empty
prefix of the string <B>foobar</B>.
<PRE>set length [<B>string length</B> $string]
if {$length == 0} {
   set isPrefix 0
} else {
   set isPrefix [<B>string equal</B> -length $length $string &quot;foobar&quot;]
}</PRE>
<H3><A NAME="M58">SEE ALSO</A></H3>
<B><A HREF="../TclCmd/expr.htm">expr</A></B>, <B><A HREF="../TclCmd/list.htm">list</A></B>
<H3><A NAME="M59">KEYWORDS</A></H3>
<A href="../Keywords/C.htm#case conversion">case conversion</A>, <A href="../Keywords/C.htm#compare">compare</A>, <A href="../Keywords/I.htm#index">index</A>, <A href="../Keywords/M.htm#match">match</A>, <A href="../Keywords/P.htm#pattern">pattern</A>, <A href="../Keywords/S.htm#string">string</A>, <A href="../Keywords/W.htm#word">word</A>, <A href="../Keywords/E.htm#equal">equal</A>, <A href="../Keywords/C.htm#ctype">ctype</A>, <A href="../Keywords/C.htm#character">character</A>, <A href="../Keywords/R.htm#reverse">reverse</A>
<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
</div>
</BODY></HTML>
