<HTML><HEAD><TITLE>Tcl Library Procedures - Filesystem manual page</TITLE></HEAD><BODY>
<DL>
<DD><A HREF="FileSystem.htm#M2" NAME="L253">NAME</A>
<DL><DD>Tcl_FSRegister, Tcl_FSUnregister, Tcl_FSData, Tcl_FSMountsChanged, Tcl_FSGetFileSystemForPath, Tcl_FSGetPathType, Tcl_FSCopyFile, Tcl_FSCopyDirectory, Tcl_FSCreateDirectory, Tcl_FSDeleteFile, Tcl_FSRemoveDirectory, Tcl_FSRenameFile, Tcl_FSListVolumes, Tcl_FSEvalFile, Tcl_FSLoadFile, Tcl_FSMatchInDirectory, Tcl_FSLink, Tcl_FSLstat, Tcl_FSUtime, Tcl_FSFileAttrsGet, Tcl_FSFileAttrsSet, Tcl_FSFileAttrStrings, Tcl_FSStat, Tcl_FSAccess, Tcl_FSOpenFileChannel, Tcl_FSGetCwd, Tcl_FSChdir, Tcl_FSPathSeparator, Tcl_FSJoinPath, Tcl_FSSplitPath, Tcl_FSEqualPaths, Tcl_FSGetNormalizedPath, Tcl_FSJoinToPath, Tcl_FSConvertToPathType, Tcl_FSGetInternalRep, Tcl_FSGetTranslatedPath, Tcl_FSGetTranslatedStringPath, Tcl_FSNewNativePath, Tcl_FSGetNativePath, Tcl_FSFileSystemInfo, Tcl_AllocStatBuf - procedures to interact with any filesystem</DL>
<DD><A HREF="FileSystem.htm#M3" NAME="L254">SYNOPSIS</A>
<DL>
</DL>
<DD><A HREF="FileSystem.htm#M4" NAME="L255">ARGUMENTS</A>
<DL>
</DL>
<DD><A HREF="FileSystem.htm#M5" NAME="L256">DESCRIPTION</A>
<DD><A HREF="FileSystem.htm#M6" NAME="L257">TCL_FILESYSTEM</A>
<DD><A HREF="FileSystem.htm#M7" NAME="L258">TYPENAME</A>
<DD><A HREF="FileSystem.htm#M8" NAME="L259">STRUCTURE LENGTH</A>
<DD><A HREF="FileSystem.htm#M9" NAME="L260">VERSION</A>
<DD><A HREF="FileSystem.htm#M10" NAME="L261">FILESYSTEM INFRASTRUCTURE</A>
<DD><A HREF="FileSystem.htm#M11" NAME="L262">PATHINFILESYSTEMPROC</A>
<DD><A HREF="FileSystem.htm#M12" NAME="L263">DUPINTERNALREPPROC</A>
<DD><A HREF="FileSystem.htm#M13" NAME="L264">FREEINTERNALREPPROC</A>
<DD><A HREF="FileSystem.htm#M14" NAME="L265">INTERNALTONORMALIZEDPROC</A>
<DD><A HREF="FileSystem.htm#M15" NAME="L266">CREATEINTERNALREPPROC</A>
<DD><A HREF="FileSystem.htm#M16" NAME="L267">NORMALIZEPATHPROC</A>
<DD><A HREF="FileSystem.htm#M17" NAME="L268">FILESYSTEM OPERATIONS</A>
<DD><A HREF="FileSystem.htm#M18" NAME="L269">FILESYSTEMPATHTYPEPROC</A>
<DD><A HREF="FileSystem.htm#M19" NAME="L270">FILESYSTEMSEPARATORPROC</A>
<DD><A HREF="FileSystem.htm#M20" NAME="L271">STATPROC</A>
<DD><A HREF="FileSystem.htm#M21" NAME="L272">ACCESSPROC</A>
<DD><A HREF="FileSystem.htm#M22" NAME="L273">OPENFILECHANNELPROC</A>
<DD><A HREF="FileSystem.htm#M23" NAME="L274">MATCHINDIRECTORYPROC</A>
<DD><A HREF="FileSystem.htm#M24" NAME="L275">UTIMEPROC</A>
<DD><A HREF="FileSystem.htm#M25" NAME="L276">LINKPROC</A>
<DD><A HREF="FileSystem.htm#M26" NAME="L277">LISTVOLUMESPROC</A>
<DD><A HREF="FileSystem.htm#M27" NAME="L278">FILEATTRSTRINGSPROC</A>
<DD><A HREF="FileSystem.htm#M28" NAME="L279">FILEATTRSGETPROC</A>
<DD><A HREF="FileSystem.htm#M29" NAME="L280">FILEATTRSSETPROC</A>
<DD><A HREF="FileSystem.htm#M30" NAME="L281">CREATEDIRECTORYPROC</A>
<DD><A HREF="FileSystem.htm#M31" NAME="L282">REMOVEDIRECTORYPROC</A>
<DD><A HREF="FileSystem.htm#M32" NAME="L283">DELETEFILEPROC</A>
<DD><A HREF="FileSystem.htm#M33" NAME="L284">FILESYSTEM EFFICIENCY</A>
<DD><A HREF="FileSystem.htm#M34" NAME="L285">LSTATPROC</A>
<DD><A HREF="FileSystem.htm#M35" NAME="L286">COPYFILEPROC</A>
<DD><A HREF="FileSystem.htm#M36" NAME="L287">RENAMEFILEPROC</A>
<DD><A HREF="FileSystem.htm#M37" NAME="L288">COPYDIRECTORYPROC</A>
<DD><A HREF="FileSystem.htm#M38" NAME="L289">LOADFILEPROC</A>
<DD><A HREF="FileSystem.htm#M39" NAME="L290">UNLOADFILEPROC</A>
<DD><A HREF="FileSystem.htm#M40" NAME="L291">GETCWDPROC</A>
<DD><A HREF="FileSystem.htm#M41" NAME="L292">CHDIRPROC</A>
<DD><A HREF="FileSystem.htm#M42" NAME="L293">KEYWORDS</A>
</DL><HR>
<H3><A NAME="M2">NAME</A></H3>
Tcl_FSRegister, Tcl_FSUnregister, Tcl_FSData, Tcl_FSMountsChanged, Tcl_FSGetFileSystemForPath, Tcl_FSGetPathType, Tcl_FSCopyFile, Tcl_FSCopyDirectory, Tcl_FSCreateDirectory, Tcl_FSDeleteFile, Tcl_FSRemoveDirectory, Tcl_FSRenameFile, Tcl_FSListVolumes, Tcl_FSEvalFile, Tcl_FSLoadFile, Tcl_FSMatchInDirectory, Tcl_FSLink, Tcl_FSLstat, Tcl_FSUtime, Tcl_FSFileAttrsGet, Tcl_FSFileAttrsSet, Tcl_FSFileAttrStrings, Tcl_FSStat, Tcl_FSAccess, Tcl_FSOpenFileChannel, Tcl_FSGetCwd, Tcl_FSChdir, Tcl_FSPathSeparator, Tcl_FSJoinPath, Tcl_FSSplitPath, Tcl_FSEqualPaths, Tcl_FSGetNormalizedPath, Tcl_FSJoinToPath, Tcl_FSConvertToPathType, Tcl_FSGetInternalRep, Tcl_FSGetTranslatedPath, Tcl_FSGetTranslatedStringPath, Tcl_FSNewNativePath, Tcl_FSGetNativePath, Tcl_FSFileSystemInfo, Tcl_AllocStatBuf - procedures to interact with any filesystem
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tcl.h&gt;</B><BR>
int<BR>
<B>Tcl_FSRegister</B>(<I>clientData, fsPtr</I>)<BR>
int<BR>
<B>Tcl_FSUnregister</B>(<I>fsPtr</I>)<BR>
ClientData<BR>
<B>Tcl_FSData</B>(<I>fsPtr</I>)<BR>
void<BR>
<B>Tcl_FSMountsChanged</B>(<I>fsPtr</I>)<BR>
Tcl_Filesystem*<BR>
<B>Tcl_FSGetFileSystemForPath</B>(<I>pathObjPtr</I>)<BR>
Tcl_PathType<BR>
<B>Tcl_FSGetPathType</B>(<I>pathObjPtr</I>)<BR>
int<BR>
<B>Tcl_FSCopyFile</B>(<I>srcPathPtr, destPathPtr</I>)<BR>
int<BR>
<B>Tcl_FSCopyDirectory</B>(<I>srcPathPtr, destPathPtr, errorPtr</I>)<BR>
int<BR>
<B>Tcl_FSCreateDirectory</B>(<I>pathPtr</I>)<BR>
int<BR>
<B>Tcl_FSDeleteFile</B>(<I>pathPtr</I>)<BR>
int<BR>
<B>Tcl_FSRemoveDirectory</B>(<I>pathPtr, int recursive, errorPtr</I>)<BR>
int<BR>
<B>Tcl_FSRenameFile</B>(<I>srcPathPtr, destPathPtr</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSListVolumes</B>(<I>void</I>)<BR>
int<BR>
<B>Tcl_FSEvalFile</B>(<I>interp, pathPtr</I>)<BR>
int<BR>
<B>Tcl_FSLoadFile</B>(<I>interp, pathPtr, sym1, sym2, proc1Ptr, proc2Ptr, handlePtr, unloadProcPtr</I>)<BR>
int<BR>
<B>Tcl_FSMatchInDirectory</B>(<I>interp, result, pathPtr, pattern, types</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSLink</B>(<I>linkNamePtr, toPtr, linkAction</I>)<BR>
int<BR>
<B>Tcl_FSLstat</B>(<I>pathPtr, statPtr</I>)<BR>
int<BR>
<B>Tcl_FSUtime</B>(<I>pathPtr, tval</I>)<BR>
int<BR>
<B>Tcl_FSFileAttrsGet</B>(<I>interp, int index, pathPtr, objPtrRef</I>)<BR>
int<BR>
<B>Tcl_FSFileAttrsSet</B>(<I>interp, int index, pathPtr, Tcl_Obj *objPtr</I>)<BR>
CONST char**      <BR>
<B>Tcl_FSFileAttrStrings</B>(<I>pathPtr, objPtrRef</I>)<BR>
int<BR>
<B>Tcl_FSStat</B>(<I>pathPtr, statPtr</I>)<BR>
int<BR>
<B>Tcl_FSAccess</B>(<I>pathPtr, mode</I>)<BR>
Tcl_Channel <BR>
<B>Tcl_FSOpenFileChannel</B>(<I>interp, pathPtr, modeString, permissions</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSGetCwd</B>(<I>interp</I>)<BR>
int<BR>
<B>Tcl_FSChdir</B>(<I>pathPtr</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSPathSeparator</B>(<I>pathPtr</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSJoinPath</B>(<I>listObj, elements</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSSplitPath</B>(<I>pathPtr, lenPtr</I>)<BR>
int<BR>
<B>Tcl_FSEqualPaths</B>(<I>firstPtr, secondPtr</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSGetNormalizedPath</B>(<I>interp, pathPtr</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSJoinToPath</B>(<I>basePtr, objc, objv</I>)<BR>
int<BR>
<B>Tcl_FSConvertToPathType</B>(<I>interp, pathPtr</I>)<BR>
ClientData <BR>
<B>Tcl_FSGetInternalRep</B>(<I>pathPtr, fsPtr</I>)<BR>
Tcl_Obj* <BR>
<B>Tcl_FSGetTranslatedPath</B>(<I>interp, pathPtr</I>)<BR>
CONST char* <BR>
<B>Tcl_FSGetTranslatedStringPath</B>(<I>interp, pathPtr</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSNewNativePath</B>(<I>fsPtr, clientData</I>)<BR>
CONST char* <BR>
<B>Tcl_FSGetNativePath</B>(<I>pathPtr</I>)<BR>
Tcl_Obj*<BR>
<B>Tcl_FSFileSystemInfo</B>(<I>pathPtr</I>)<BR>
Tcl_StatBuf*<BR>
<B>Tcl_AllocStatBuf</B>()<BR>
<H3><A NAME="M4">ARGUMENTS</A></H3>
<DL>
<P><DT>Tcl_Filesystem <B>*fsPtr</B> (in)<DD>
Points to a structure containing the addresses of procedures that
can be called to perform the various filesystem operations.
<P><DT>Tcl_Obj <B>*pathPtr</B> (in)<DD>
The path represented by this object is used for the operation in
question.  If the object does not already have an internal <B>path</B>
representation, it will be converted to have one.
<P><DT>Tcl_Obj <B>*srcPathPtr</B> (in)<DD>
As for <B>pathPtr</B>, but used for the source file for a copy or
rename operation.
<P><DT>Tcl_Obj <B>*destPathPtr</B> (in)<DD>
As for <B>pathPtr</B>, but used for the destination filename for a copy or
rename operation.
<P><DT>CONST char <B>*pattern</B> (in)<DD>
Only files or directories matching this pattern will be returned by
<B>Tcl_FSMatchInDirectory</B>.
<P><DT>GlobTypeData <B>*types</B> (in)<DD>
Only files or directories matching the type descriptions contained in
this structure will be returned by <B>Tcl_FSMatchInDirectory</B>.  It
is very important that the 'directory' flag is properly handled.
This parameter may be NULL.
<P><DT><A HREF="../TclLib/Interp.htm">Tcl_Interp</A> <B>*interp</B> (in)<DD>
Interpreter to use either for results, evaluation, or reporting error 
messages.
<P><DT>ClientData <B>clientData</B> (in)<DD>
The native description of the path object to create.
<P><DT>Tcl_Obj <B>*firstPtr</B> (in)<DD>
The first of two path objects to compare.  The object may be converted
to <B>path</B> type.
<P><DT>Tcl_Obj <B>*secondPtr</B> (in)<DD>
The second of two path objects to compare.  The object may be converted
to <B>path</B> type.
<P><DT>Tcl_Obj <B>*listObj</B> (in)<DD>
The list of path elements to operate on with a <B><A HREF="../TclCmd/join.htm">join</A></B> operation.
<P><DT>int <B>elements</B> (in)<DD>
If non-negative, the number of elements in the listObj which should
be joined together.  If negative, then all elements are joined.
<P><DT>Tcl_Obj <B>**errorPtr</B> (out)<DD>
In the case of an error, filled with an object containing the name of
the file which caused an error in the various copy/rename operations.
<P><DT>Tcl_Obj <B>**objPtrRef</B> (out)<DD>
Filled with an object containing the result of the operation.
<P><DT>Tcl_Obj <B>*result</B> (out)<DD>
Pre-allocated object in which to store (by lappending) the list of
files or directories which are successfully matched in
<B>Tcl_FSMatchInDirectory</B>.
<P><DT>int <B>mode</B> (in)<DD>
Mask consisting of one or more of R_OK, W_OK, X_OK and F_OK.  R_OK,
W_OK and X_OK request checking whether the file exists and  has  read,
write and  execute  permissions, respectively.  F_OK just requests
checking for the existence of the file.
<P><DT>Tcl_StatBuf <B>*statPtr</B> (out)<DD>
The structure that contains the result of a stat or lstat operation.
<P><DT>CONST char <B>*sym1</B> (in)<DD>
Name of a procedure to look up in the file's symbol table
<P><DT>CONST char <B>*sym2</B> (in)<DD>
Name of a procedure to look up in the file's symbol table
<P><DT>Tcl_PackageInitProc <B>**proc1Ptr</B> (out)<DD>
Filled with the init function for this code.
<P><DT>Tcl_PackageInitProc <B>**proc2Ptr</B> (out)<DD>
Filled with the safe-init function for this code.
<P><DT>ClientData <B>*clientDataPtr</B> (out)<DD>
Filled with the clientData value to pass to this code's unload
function when it is called.
<P><DT>TclfsUnloadFileProc_ <B>**unloadProcPtr</B> (out)<DD>
Filled with the function to use to unload this piece of code.
<P><DT>utimbuf <B>*tval</B> (in)<DD>
The access and modification times in this structure are read and 
used to set those values for a given file.
<P><DT>CONST char <B>*modeString</B> (in)<DD>
Specifies how the file is to be accessed.  May have any of the values
allowed for the <I>mode</I> argument to the Tcl <B><A HREF="../TclCmd/open.htm">open</A></B> command.
<P><DT>int <B>permissions</B> (in)<DD>
POSIX-style permission flags such as 0644.  If a new file is created, these
permissions will be set on the created file.
<P><DT>int <B>*lenPtr</B> (out)<DD>
If non-NULL, filled with the number of elements in the split path.
<P><DT>Tcl_Obj <B>*basePtr</B> (in)<DD>
The base path on to which to join the given elements.  May be NULL.
<P><DT>int <B>objc</B> (in)<DD>
The number of elements in <I>objv</I>.
<P><DT>Tcl_Obj *CONST <B>objv[]</B> (in)<DD>
The elements to join to the given base path.
<P></DL>
<H3><A NAME="M5">DESCRIPTION</A></H3>
There are several reasons for calling the <B>Tcl_FS...</B> functions
rather than calling system level functions like <B>access</B> and
<B>stat</B> directly.  First, they will work cross-platform, so an
extension which calls them should work unmodified on Unix, MacOS and
Windows.  Second, the Windows implementation of some of these functions
fixes some bugs in the system level calls.  Third, these function calls
deal with any 'Utf to platform-native' path conversions which may be
required (and may cache the results of such conversions for greater
efficiency on subsequent calls).  Fourth, and perhaps most importantly,
all of these functions are 'virtual filesystem aware'.  Any virtual
filesystem which has been registered (through
<B>Tcl_FSRegister</B>) may reroute file access to alternative
media or access methods.  This means that all of these functions (and
therefore the corresponding <B><A HREF="../TclCmd/file.htm">file</A></B>, <B><A HREF="../TclCmd/glob.htm">glob</A></B>, <B><A HREF="../TclCmd/pwd.htm">pwd</A></B>, <B><A HREF="../TclCmd/cd.htm">cd</A></B>,
<B><A HREF="../TclCmd/open.htm">open</A></B>, etc.  Tcl commands) may be operate on 'files' which are not
native files in the native filesystem.  This also means that any Tcl
extension which accesses the filesystem through this API is
automatically 'virtual filesystem aware'.  Of course, if an extension
accesses the native filesystem directly (through platform-specific
APIs, for example), then Tcl cannot intercept such calls.  
<P>
If appropriate vfs's have been registered, the 'files' may, to give two
examples, be remote (e.g. situated on a remote ftp server) or archived
(e.g. lying inside a .zip archive).  Such registered filesystems provide
a lookup table of functions to implement all or some of the functionality
listed here.  Finally, the <B>Tcl_FSStat</B> and <B>Tcl_FSLstat</B> calls
abstract away from what the 'struct stat' buffer buffer is actually
declared to be, allowing the same code to be used both on systems with
and systems without support for files larger than 2GB in size.
<P>
The <B>Tcl_FS...</B> are objectified and may cache internal
representations and other path-related strings (e.g. the current working
directory).  One side-effect of this is that one must not pass in objects
with a refCount of zero to any of these functions.  If such calls were 
handled, they might result
in memory leaks (under some circumstances, the filesystem code may wish
to retain a reference to the passed in object, and so one must not assume
that after any of these calls return, the object still has a refCount of
zero - it may have been incremented), or in a direct segfault
due to the object being freed part way through the complex object
manipulation required to ensure that the path is fully normalized and
absolute for filesystem determination.  The practical lesson to learn
from this is that <B>Tcl_Obj *path = Tcl_NewStringObj(...)  ;
Tcl_FS...(path) ; Tcl_DecrRefCount(path)</B> is wrong, and may segfault.
The 'path' must have its refCount incremented before passing it in, or
decrementing it.  For this reason, objects with a refCount of zero are
considered not to be valid filesystem paths and calling any Tcl_FS API
with such an object will result in no action being taken.
<P>
<B>Tcl_FSCopyFile</B> attempts to copy the file given by srcPathPtr to the
path name given by destPathPtr.  If the two paths given lie in the same
filesystem (according to <B>Tcl_FSGetFileSystemForPath</B>) then that
filesystem's 'copy file' function is called (if it is non-NULL).
Otherwise the function returns -1 and sets Tcl's errno to the 'EXDEV'
posix error code (which signifies a 'cross-domain link').
<P>
<B>Tcl_FSCopyDirectory</B> attempts to copy the directory given by srcPathPtr to the
path name given by destPathPtr.  If the two paths given lie in the same
filesystem (according to <B>Tcl_FSGetFileSystemForPath</B>) then that
filesystem's 'copy file' function is called (if it is non-NULL).
Otherwise the function returns -1 and sets Tcl's errno to the 'EXDEV'
posix error code (which signifies a 'cross-domain link').
<P>
<B>Tcl_FSCreateDirectory</B> attempts to create the directory given by
pathPtr by calling the owning filesystem's 'create directory'
function.
<P>
<B>Tcl_FSDeleteFile</B> attempts to delete the file given by
pathPtr by calling the owning filesystem's 'delete file'
function.
<P>
<B>Tcl_FSRemoveDirectory</B> attempts to remove the directory given by
pathPtr by calling the owning filesystem's 'remove directory'
function.
<P>
<B>Tcl_FSRenameFile</B> attempts to rename the file or directory given by
srcPathPtr to the path name given by destPathPtr.  If the two paths
given lie in the same filesystem (according to
<B>Tcl_FSGetFileSystemForPath</B>) then that filesystem's 'rename file'
function is called (if it is non-NULL).  Otherwise the function returns -1
and sets Tcl's errno to the 'EXDEV' posix error code (which signifies
a ``cross-domain link'').
<P>
<B>Tcl_FSListVolumes</B> calls each filesystem which has a non-NULL 'list
volumes' function and asks them to return their list of root volumes.  It
accumulates the return values in a list which is returned to the
caller (with a refCount of 0).
<P>
<B>Tcl_FSEvalFile</B> reads the file given by <I>pathPtr</I> and evaluates
its contents as a Tcl script.  It returns the same information as
<B><A HREF="../TclLib/Eval.htm">Tcl_EvalObjEx</A></B>.
If the file couldn't be read then a Tcl error is returned to describe
why the file couldn't be read.
The eofchar for files is '&#92;32' (^Z) for all platforms.
If you require a ``^Z'' in code for string comparison, you can use
``&#92;032'' or ``&#92;u001a'', which will be safely substituted by the Tcl
interpreter into ``^Z''.
<P>
<B>Tcl_FSLoadFile</B> dynamically loads a binary code file into memory and
returns the addresses of two procedures within that file, if they are
defined.  The appropriate function for the filesystem to which pathPtr
belongs will be called.  If that filesystem does not implement this
function (most virtual filesystems will not, because of OS limitations
in dynamically loading binary code), Tcl will attempt to copy the file
to a temporary directory and load that temporary file.
<P>
Returns a standard Tcl completion code.  If an error occurs, an error
message is left in the interp's result.
<P>
<B>Tcl_FSMatchInDirectory</B> is used by the globbing code to search a
directory for all files which match a given pattern.  The appropriate
function for the filesystem to which pathPtr belongs will be called.
<P>
The return value is a standard Tcl result indicating whether an error
occurred in globbing.  Error messages are placed in interp, but good
results are placed in the resultPtr given.
 	
Note that the 'glob' code implements recursive patterns internally, so
this function will only ever be passed simple patterns, which can be
matched using the logic of 'string match'.  To handle recursion, Tcl
will call this function frequently asking only for directories to be
returned.
<P>
<B>Tcl_FSLink</B> replaces the library version of readlink(), and
extends it to support the creation of links.  The appropriate function 
for the filesystem to which linkNamePtr belongs will be called.
<P>
If the <I>toPtr</I> is NULL, a readlink action is performed.  The result
is a Tcl_Obj specifying the contents of the symbolic link given by
<I>linkNamePtr</I>, or NULL if the link could not be read.  The result is owned
by the caller, which should call <A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A> when the result is no
longer needed.  If the <I>toPtr</I> is not NULL, Tcl should create a link
of one of the types passed in in the <I>linkAction</I> flag.  This flag is
an or'd combination of TCL_CREATE_SYMBOLIC_LINK and TCL_CREATE_HARD_LINK.
Where a choice exists (i.e. more than one flag is passed in), the Tcl
convention is to prefer symbolic links.  When a link is successfully
created, the return value should be <I>toPtr</I> (which is therefore
already owned by the caller).  If unsuccessful, NULL should be
returned.
<P>
<B>Tcl_FSLstat</B> fills the stat structure <I>statPtr</I> with information
about the specified file.  You do not need any access rights to the
file to get this information but you need search rights to all
directories named in the path leading to the file.  The stat structure
includes info regarding device, inode (always 0 on Windows),
privilege mode, nlink (always 1 on Windows), user id (always 0 on
Windows), group id (always 0 on Windows), rdev (same as device on
Windows), size, last access time, last modification time, and creation
time.
<P>
If <I>path</I> exists, <B>Tcl_FSLstat</B> returns 0 and the stat structure
is filled with data.  Otherwise, -1 is returned, and no stat info is
given.
<P>
<B>Tcl_FSUtime</B> replaces the library version of utime.  
<P>
For results see 'utime' documentation.  If successful, the function
will update the 'atime' and 'mtime' values of the file given.
<P>
<B>Tcl_FSFileAttrsGet</B> implements read access for the hookable 'file
attributes' subcommand.  The appropriate function for the filesystem to
which pathPtr belongs will be called.
<P>
If the result is TCL_OK, then an object was placed in objPtrRef, which
will only be temporarily valid (unless <A HREF="../TclLib/Object.htm">Tcl_IncrRefCount</A> is called).
<P>
<B>Tcl_FSFileAttrsSet</B> implements write access for the hookable 'file
attributes' subcommand.  The appropriate function for the filesystem to
which pathPtr belongs will be called.
<P>
<B>Tcl_FSFileAttrStrings</B> implements part of the hookable 'file attributes'
subcommand.  The appropriate function for the filesystem to which
pathPtr belongs will be called.
<P>
The called procedure may either return an array of strings, or may
instead return NULL and place a Tcl list into the given objPtrRef.  Tcl
will take that list and first increment its refCount before using it.
On completion of that use, Tcl will decrement its refCount.  Hence if
the list should be disposed of by Tcl when done, it should have a
refCount of zero, and if the list should not be disposed of, the
filesystem should ensure it retains a refCount on the object.
<P>
<B>Tcl_FSAccess</B> checks whether the process would be allowed to read,
write or test for existence of the file (or other file system object)
whose name is pathname.   If pathname is a symbolic link on Unix,
then permissions of the file referred by this symbolic link are
tested.
<P>
On success (all requested permissions granted), zero is returned.  On
error (at least one bit in mode asked for a permission that is denied,
or some other  error occurred), -1 is returned.
<P>
<B>Tcl_FSStat</B> fills the stat structure <I>statPtr</I> with information
about the specified file.  You do not need any access rights to the
file to get this information but you need search rights to all
directories named in the path leading to the file.  The stat structure
includes info regarding device, inode (always 0 on Windows),
privilege mode, nlink (always 1 on Windows), user id (always 0 on
Windows), group id (always 0 on Windows), rdev (same as device on
Windows), size, last access time, last modification time, and creation
time.
<P>
If <I>path</I> exists, <B>Tcl_FSStat</B> returns 0 and the stat structure
is filled with data.  Otherwise, -1 is returned, and no stat info is
given.
<P>
<B>Tcl_FSOpenFileChannel</B> opens a file specified by <I>pathPtr</I> and
returns a channel handle that can be used to perform input and output on
the file. This API is modeled after the <B>fopen</B> procedure of
the Unix standard I/O library.
The syntax and meaning of all arguments is similar to those
given in the Tcl <B><A HREF="../TclCmd/open.htm">open</A></B> command when opening a file.
If an error occurs while opening the channel, <B>Tcl_FSOpenFileChannel</B>
returns NULL and records a POSIX error code that can be
retrieved with <B><A HREF="../TclLib/SetErrno.htm">Tcl_GetErrno</A></B>.
In addition, if <I>interp</I> is non-NULL, <B>Tcl_FSOpenFileChannel</B>
leaves an error message in <I>interp</I>'s result after any error.
<P>
The newly created channel is not registered in the supplied interpreter; to
register it, use <B><A HREF="../TclLib/OpenFileChnl.htm">Tcl_RegisterChannel</A></B>, described below.
If one of the standard channels, <B>stdin, stdout</B> or <B>stderr</B> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.
<P>
<B>Tcl_FSGetCwd</B> replaces the library version of getcwd().
<P>
It returns the Tcl library's current working directory.  This may be
different to the native platform's working directory, in the case for 
which the cwd is not in the native filesystem.
<P>
The result is a pointer to a Tcl_Obj specifying the current directory,
or NULL if the current directory could not be determined.  If NULL is
returned, an error message is left in the interp's result.
	
The result already has its refCount incremented for the caller.  When
it is no longer needed, that refCount should be decremented.  This is
needed for thread-safety purposes, to allow multiple threads to access
this and related functions, while ensuring the results are always
valid.
<P>
<B>Tcl_FSChdir</B> replaces the library version of chdir().  The path is
normalized and then passed to the filesystem which claims it.  If that
filesystem does not implement this function, Tcl will fallback to a 
combination of stat and access to check whether the directory exists
and has appropriate permissions.
<P>
For results, see chdir() documentation.  If successful, we keep a
record of the successful path in cwdPathPtr for subsequent calls to
getcwd.
<P>
<B>Tcl_FSPathSeparator</B> returns the separator character to be used for 
most specific element of the path specified by pathPtr (i.e. the last 
part of the path).
<P>
The separator is returned as a Tcl_Obj containing a string of length
1.  If the path is invalid, NULL is returned.
<P>
<B>Tcl_FSJoinPath</B> takes the given Tcl_Obj, which should be a valid list,
and returns the path object given by considering the first 'elements'
elements as valid path segments.  If elements &lt; 0, we use the entire
list.
<P>
Returns object with refCount of zero, containing the joined path.
<P>
<B>Tcl_FSSplitPath</B> takes the given Tcl_Obj, which should be a valid path,
and returns a Tcl List object containing each segment of that path as
an element.
<P>
Returns list object with refCount of zero.  If the passed in lenPtr is
non-NULL, we use it to return the number of elements in the returned
list.
<P>
<B>Tcl_FSEqualPaths</B> tests whether the two paths given represent the same
filesystem object
<P>
It returns 1 if the paths are equal, and 0 if they are different.  If 
either path is NULL, 0 is always returned.
<P>
<B>Tcl_FSGetNormalizedPath</B> this important function attempts to extract
from the given Tcl_Obj a unique normalized path representation, whose
string value can be used as a unique identifier for the file.
<P>
It returns the normalized path object, with refCount of zero, or NULL 
if the path was invalid or could otherwise not be successfully
converted.  Extraction of absolute, normalized paths is very
efficient (because the filesystem operates on these representations
internally), although the result when the filesystem contains
numerous symbolic links may not be the most user-friendly
version of a path.
<P>
<B>Tcl_FSJoinToPath</B> takes the given object, which should usually be a
valid path or NULL, and joins onto it the array of paths segments
given.
<P>
Returns object with refCount of zero, containing the joined path.
<P>
<B>Tcl_FSConvertToPathType</B> tries to convert the given Tcl_Obj to a valid
Tcl path type, taking account of the fact that the cwd may have changed
even if this object is already supposedly of the correct type.
The filename may begin with &quot;~&quot; (to indicate current user's home
directory) or &quot;~&lt;user&gt;&quot; (to indicate any user's home directory).
<P>
If the conversion succeeds (i.e. the object is a valid path in one of 
the current filesystems), then TCL_OK is returned.  Otherwise
TCL_ERROR is returned, and an error message may
be left in the interpreter.
<P>
<B>Tcl_FSGetInternalRep</B> extracts the internal representation of a given
path object, in the given filesystem.  If the path object belongs to a
different filesystem, we return NULL. If the internal representation is
currently NULL, we attempt to generate it, by calling the filesystem's
<B>Tcl_FSCreateInternalRepProc</B>.
<P>
Returns NULL or a valid internal path representation.  This internal
representation is cached, so that repeated calls to this function will
not require additional conversions.
<P>
<B>Tcl_FSGetTranslatedPath</B> attempts to extract the translated path
from the given Tcl_Obj.  
<P>
If the translation succeeds (i.e. the object is a valid path), then it
is returned.  Otherwise NULL will be returned, and an error message may
be left in the interpreter.  A &quot;translated&quot; path is one which
contains no &quot;~&quot; or &quot;~user&quot; sequences (these have been expanded to
their current representation in the filesystem).
<P>
<B>Tcl_FSGetTranslatedStringPath</B> does the same as 
<B>Tcl_FSGetTranslatedPath</B>, but returns a character string or NULL.
<P>
<B>Tcl_FSNewNativePath</B> performs something like that reverse of the
usual obj-&gt;path-&gt;nativerep conversions.  If some code retrieves a path
in native form (from, e.g. readlink or a native dialog), and that path
is to be used at the Tcl level, then calling this function is an
efficient way of creating the appropriate path object type.
<P>
The resulting object is a pure 'path' object, which will only receive 
a Utf-8 string representation if that is required by some Tcl code.
<P>
<B>Tcl_FSGetNativePath</B> is for use by the Win/Unix/MacOS native
filesystems, so that they can easily retrieve the native (char* or
TCHAR*) representation of a path.  This function is a convenience
wrapper around <B>Tcl_FSGetInternalRep</B>, and assumes the native
representation is string-based.  It may be desirable in the future
to have non-string-based native representations (for example, on
MacOS, a representation using a fileSpec of FSRef structure would
probably be more efficient).  On Windows a full Unicode
representation would allow for paths of unlimited length.  Currently
the representation is simply a character string containing the
complete, absolute path in the native encoding.
<P>
The native representation is cached so that repeated calls to this
function will not require additional conversions.
<P>
<B>Tcl_FSFileSystemInfo</B> returns a list of two elements.  The first
element is the name of the filesystem (e.g. &quot;native&quot; or &quot;vfs&quot; or &quot;zip&quot;
or &quot;prowrap&quot;, perhaps), and the second is the particular type of the
given path within that filesystem (which is filesystem dependent).  The
second element may be empty if the filesystem does not provide a
further categorization of files.
<P>
A valid list object is returned, unless the path object is not
recognized, when NULL will be returned.
<P>
<B>Tcl_FSGetFileSystemForPath</B> returns the a pointer to the
<B>Tcl_Filesystem</B> which accepts this path as valid.
<P>
If no filesystem will accept the path, NULL is returned.
<P>
<B>Tcl_FSGetPathType</B> determines whether the given path is relative 
to the current directory, relative to the current volume, or
absolute.
<P>
It returns one of TCL_PATH_ABSOLUTE, TCL_PATH_RELATIVE, or
TCL_PATH_VOLUME_RELATIVE
<P>
<B>Tcl_AllocStatBuf</B> allocates a <I>Tcl_StatBuf</I> on the system
heap (which may be deallocated by being passed to <B><A HREF="../TclLib/Alloc.htm">ckfree</A></B>.)  This
allows extensions to invoke <B>Tcl_FSStat</B> and <B>Tcl_FSLStat</B>
without being dependent on the size of the buffer.  That in turn
depends on the flags used to build Tcl.
<P>
<H3><A NAME="M6">TCL_FILESYSTEM</A></H3>
A filesystem provides a <B>Tcl_Filesystem</B> structure that contains
pointers to functions that implement the various operations on a
filesystem; these operations are invoked as needed by the generic
layer, which generally occurs through the functions listed above.  
<P>
The <B>Tcl_Filesystem</B> structures are manipulated using the following
methods.
<P>
<B>Tcl_FSRegister</B> takes a pointer to a filesystem structure and an
optional piece of data to associated with that filesystem.  On calling
this function, Tcl will attach the filesystem to the list of known
filesystems, and it will become fully functional immediately.  Tcl does
not check if the same filesystem is registered multiple times (and in
general that is not a good thing to do).  TCL_OK will be returned.
<P>
<B>Tcl_FSUnregister</B> removes the given filesystem structure from
the list of known filesystems, if it is known, and returns TCL_OK.  If
the filesystem is not currently registered, TCL_ERROR is returned.
<P>
<B>Tcl_FSData</B> will return the ClientData associated with the given 
filesystem, if that filesystem is registered.  Otherwise it will
return NULL.
<P>
<B>Tcl_FSMountsChanged</B> is used to inform the Tcl's core that
the set of mount points for the given (already registered) filesystem
have changed, and that cached file representations may therefore no
longer be correct.
<P>
The <B>Tcl_Filesystem</B> structure contains the following fields:
<PRE>typedef struct Tcl_Filesystem {
    CONST char *<I>typeName</I>;  
    int <I>structureLength</I>;   
    Tcl_FSVersion <I>version</I>;  
    Tcl_FSPathInFilesystemProc *<I>pathInFilesystemProc</I>;
    Tcl_FSDupInternalRepProc *<I>dupInternalRepProc</I>;
    Tcl_FSFreeInternalRepProc *<I>freeInternalRepProc</I>;
    Tcl_FSInternalToNormalizedProc *<I>internalToNormalizedProc</I>;
    Tcl_FSCreateInternalRepProc *<I>createInternalRepProc</I>;
    Tcl_FSNormalizePathProc *<I>normalizePathProc</I>;       
    Tcl_FSFilesystemPathTypeProc *<I>filesystemPathTypeProc</I>;
    Tcl_FSFilesystemSeparatorProc *<I>filesystemSeparatorProc</I>;
    Tcl_FSStatProc *<I>statProc</I>; 
    Tcl_FSAccessProc *<I>accessProc</I>;	    
    Tcl_FSOpenFileChannelProc *<I>openFileChannelProc</I>; 
    Tcl_FSMatchInDirectoryProc *<I>matchInDirectoryProc</I>;  
    Tcl_FSUtimeProc *<I>utimeProc</I>;       
    Tcl_FSLinkProc *<I>linkProc</I>; 
    Tcl_FSListVolumesProc *<I>listVolumesProc</I>;	    
    Tcl_FSFileAttrStringsProc *<I>fileAttrStringsProc</I>;
    Tcl_FSFileAttrsGetProc *<I>fileAttrsGetProc</I>;
    Tcl_FSFileAttrsSetProc *<I>fileAttrsSetProc</I>;
    Tcl_FSCreateDirectoryProc *<I>createDirectoryProc</I>;	    
    Tcl_FSRemoveDirectoryProc *<I>removeDirectoryProc</I>;	    
    Tcl_FSDeleteFileProc *<I>deleteFileProc</I>;	    
    Tcl_FSCopyFileProc *<I>copyFileProc</I>; 
    Tcl_FSRenameFileProc *<I>renameFileProc</I>;	    
    Tcl_FSCopyDirectoryProc *<I>copyDirectoryProc</I>;	    
    Tcl_FSLstatProc *<I>lstatProc</I>;	    
    Tcl_FSLoadFileProc *<I>loadFileProc</I>; 
    Tcl_FSGetCwdProc *<I>getCwdProc</I>;     
    Tcl_FSChdirProc *<I>chdirProc</I>;	    
} Tcl_Filesystem;</PRE>
<P>
Except for the first three fields in this structure which contain
simple data elements, all entries contain addresses of functions called
by the generic filesystem layer to perform the complete range of
filesystem related actions.
<P>
The many functions in this structure are broken down into three
categories: infrastructure functions (almost all of which must be
implemented), operational functions (which must be implemented if a
complete filesystem is provided), and efficiency functions (which need
only be implemented if they can be done so efficiently, or if they have
side-effects which are required by the filesystem; Tcl has less
efficient emulations it can fall back on).  It is important to note
that, in the current version of Tcl, most of these fallbacks are only
used to handle commands initiated in Tcl, not in C. What this means is,
that if a 'file rename' command is issued in Tcl, and the relevant
filesystem(s) do not implement their <I>Tcl_FSRenameFileProc</I>, Tcl's
core will instead fallback on a combination of other filesystem
functions (it will use <I>Tcl_FSCopyFileProc</I> followed by
<I>Tcl_FSDeleteFileProc</I>, and if <I>Tcl_FSCopyFileProc</I> is not
implemented there is a further fallback).  However, if a
<I>Tcl_FSRenameFile</I> command is issued at the C level, no such
fallbacks occur.  This is true except for the last four entries in the
filesystem table (lstat, load, getcwd and chdir)
for which fallbacks do in fact occur at the C level.
<P>
As an example, here is the filesystem lookup table used by the
&quot;vfs&quot; extension which allows filesystem actions to be implemented
in Tcl.
<PRE>static Tcl_Filesystem vfsFilesystem = {
    &quot;tclvfs&quot;,
    sizeof(Tcl_Filesystem),
    TCL_FILESYSTEM_VERSION_1,
    &amp;VfsPathInFilesystem,
    &amp;VfsDupInternalRep,
    &amp;VfsFreeInternalRep,
    /* No internal to normalized, since we don't create any
     * pure 'internal' Tcl_Obj path representations */
    NULL,
    /* No create native rep function, since we don't use it
     * and don't choose to support uses of 'Tcl_FSNewNativePath' */
    NULL,
    /* Normalize path isn't needed - we assume paths only have
     * one representation */
    NULL,
    &amp;VfsFilesystemPathType,
    &amp;VfsFilesystemSeparator,
    &amp;VfsStat,
    &amp;VfsAccess,
    &amp;VfsOpenFileChannel,
    &amp;VfsMatchInDirectory,
    &amp;VfsUtime,
    /* We choose not to support symbolic links inside our vfs's */
    NULL,
    &amp;VfsListVolumes,
    &amp;VfsFileAttrStrings,
    &amp;VfsFileAttrsGet,
    &amp;VfsFileAttrsSet,
    &amp;VfsCreateDirectory,
    &amp;VfsRemoveDirectory, 
    &amp;VfsDeleteFile,
    /* No copy file - fallback will occur at Tcl level */
    NULL,
    /* No rename file - fallback will occur at Tcl level */
    NULL,
    /* No copy directory - fallback will occur at Tcl level */
    NULL, 
    /* Core will use stat for lstat */
    NULL,
    /* No load - fallback on core implementation */
    NULL,
    /* We don't need a getcwd or chdir - fallback on Tcl's versions */
    NULL,
    NULL
};</PRE>
<P>
Any functions which take path names in Tcl_Obj form take
those names in UTF-8 form.  The filesystem infrastructure API is
designed to support efficient, cached conversion of these UTF-8 paths
to other native representations.
<H3><A NAME="M7">TYPENAME</A></H3>
The <I>typeName</I> field contains a null-terminated string that
identifies the type of the filesystem implemented, e.g.
<B>native</B> or <B>zip</B> or <B>vfs</B>.
<P>
<H3><A NAME="M8">STRUCTURE LENGTH</A></H3>
The <I>structureLength</I> field is generally implemented as
<I>sizeof(Tcl_Filesystem)</I>, and is there to allow easier
binary backwards compatibility if the size of the structure
changes in a future Tcl release.
<H3><A NAME="M9">VERSION</A></H3>
The <I>version</I> field should be set to <B>TCL_FILESYSTEM_VERSION_1</B>.
<H3><A NAME="M10">FILESYSTEM INFRASTRUCTURE</A></H3>
These fields contain addresses of functions which are used to associate
a particular filesystem with a file path, and deal with the internal
handling of path representations, for example copying and freeing such
representations.
<H3><A NAME="M11">PATHINFILESYSTEMPROC</A></H3>
The <I>pathInFilesystemProc</I> field contains the address of a function
which is called to determine whether a given path object belongs to this
filesystem or not.  Tcl will only call the rest of the filesystem
functions with a path for which this function has returned <B>TCL_OK</B>.
If the path does not belong, -1 should be returned (the behaviour of Tcl
for any other return value is not defined).  If <B>TCL_OK</B> is returned,
then the optional <B>clientDataPtr</B> output parameter can be used to
return an internal (filesystem specific) representation of the path,
which will be cached inside the path object, and may be retrieved
efficiently by the other filesystem functions.  Tcl will simultaneously
cache the fact that this path belongs to this filesystem.  Such caches
are invalidated when filesystem structures are added or removed from
Tcl's internal list of known filesystems.
<P>
<PRE>typedef int Tcl_FSPathInFilesystemProc(
	Tcl_Obj *<I>pathPtr</I>, 
	ClientData *<I>clientDataPtr</I>);</PRE>
<H3><A NAME="M12">DUPINTERNALREPPROC</A></H3>
This function makes a copy of a path's internal representation, and is
called when Tcl needs to duplicate a path object.  If NULL, Tcl will
simply not copy the internal representation, which may then need to be
regenerated later.
<P>
<PRE>typedef ClientData Tcl_FSDupInternalRepProc(
	ClientData <I>clientData</I>);</PRE>
<H3><A NAME="M13">FREEINTERNALREPPROC</A></H3>
Free the internal representation.  This must be implemented if internal
representations need freeing (i.e. if some memory is allocated when an
internal representation is generated), but may otherwise be NULL.
<P>
<PRE>typedef void Tcl_FSFreeInternalRepProc(
	ClientData <I>clientData</I>);</PRE>
<H3><A NAME="M14">INTERNALTONORMALIZEDPROC</A></H3>
Function to convert internal representation to a normalized path.  Only
required if the filesystem creates pure path objects with no string/path
representation.  The return value is a Tcl object whose string
representation is the normalized path.
<P>
<PRE>typedef Tcl_Obj* Tcl_FSInternalToNormalizedProc(
	ClientData <I>clientData</I>);</PRE>
<H3><A NAME="M15">CREATEINTERNALREPPROC</A></H3>
Function to take a path object, and calculate an internal
representation for it, and store that native representation in the
object.  May be NULL if paths have no internal representation, or if
the <I>Tcl_FSPathInFilesystemProc</I> for this filesystem always
immediately creates an internal representation for paths it accepts.
<P>
<PRE>typedef ClientData Tcl_FSCreateInternalRepProc(
	Tcl_Obj *<I>pathPtr</I>);</PRE>
<H3><A NAME="M16">NORMALIZEPATHPROC</A></H3>
Function to normalize a path.  Should be implemented for all
filesystems which can have multiple string representations for the same
path object.  In Tcl, every 'path' must have a single unique 'normalized'
string representation.  Depending on the filesystem,
there may be more than one unnormalized string representation which
refers to that path (e.g. a relative path, a path with different
character case if the filesystem is case insensitive, a path contain a
reference to a home directory such as '~', a path containing symbolic
links, etc).  If the very last component in the path is a symbolic
link, it should not be converted into the object it points to (but
its case or other aspects should be made unique).  All other path
components should be converted from symbolic links.  This one
exception is required to agree with Tcl's semantics with 'file
delete', 'file rename', 'file copy' operating on symbolic links.
This function may be called with 'nextCheckpoint' either
at the beginning of the path (i.e. zero), at the end of the path, or
at any intermediate file separator in the path.  It will never
point to any other arbitrary position in the path. In the last of
the three valid cases, the implementation can assume that the path 
up to and including the file separator is known and normalized.
<P>
<PRE>typedef int Tcl_FSNormalizePathProc(
	<A HREF="../TclLib/Interp.htm">Tcl_Interp</A> *<I>interp</I>, 
	Tcl_Obj *<I>pathPtr</I>, 
	int <I>nextCheckpoint</I>);</PRE>
<H3><A NAME="M17">FILESYSTEM OPERATIONS</A></H3>
The fields in this section of the structure contain addresses of
functions which are called to carry out the basic filesystem
operations.  A filesystem which expects to be used with the complete
standard Tcl command set must implement all of these.  If some of
them are not implemented, then certain Tcl commands may fail when
operating on paths within that filesystem.  However, in some instances
this may be desirable (for example, a read-only filesystem should not
implement the last four functions, and a filesystem which does not
support symbolic links need not implement the <B>readlink</B> function,
etc.  The Tcl core expects filesystems to behave in this way).
<H3><A NAME="M18">FILESYSTEMPATHTYPEPROC</A></H3>
Function to determine the type of a path in this filesystem.  May be
NULL, in which case no type information will be available to users of
the filesystem.  The 'type' is used only for informational purposes,
and should be returned as the string representation of the Tcl_Obj
which is returned.  A typical return value might be &quot;networked&quot;, &quot;zip&quot;
or &quot;ftp&quot;.  The Tcl_Obj result is owned by the filesystem and so Tcl will 
increment the refCount of that object if it wishes to retain a reference 
to it.
<P>
<PRE>typedef Tcl_Obj* Tcl_FSFilesystemPathTypeProc(
	Tcl_Obj *<I>pathPtr</I>);</PRE>
<H3><A NAME="M19">FILESYSTEMSEPARATORPROC</A></H3>
Function to return the separator character(s) for this filesystem.
Must be implemented, otherwise the <B><A HREF="../TclCmd/file.htm">file separator</A></B> command will not
function correctly.  The usual return value will be a Tcl_Obj
containing the string &quot;/&quot;.
<P>
<PRE>typedef Tcl_Obj* Tcl_FSFilesystemSeparatorProc(
	Tcl_Obj *<I>pathPtr</I>);</PRE>
<H3><A NAME="M20">STATPROC</A></H3>
Function to process a <B>Tcl_FSStat()</B> call.  Must be implemented for any
reasonable filesystem, since many Tcl level commands depend crucially 
upon it (e.g. <B><A HREF="../TclCmd/file.htm">file atime</A></B>, <B><A HREF="../TclCmd/file.htm">file isdirectory</A></B>, <B><A HREF="../TclCmd/file.htm">file size</A></B>,
<B><A HREF="../TclCmd/glob.htm">glob</A></B>).
<P>
<PRE>typedef int Tcl_FSStatProc(
	Tcl_Obj *<I>pathPtr</I>,
	Tcl_StatBuf *<I>statPtr</I>);</PRE>
<P>
The <B>Tcl_FSStatProc</B> fills the stat structure <I>statPtr</I> with
information about the specified file.  You do not need any access
rights to the file to get this information but you need search rights
to all directories named in the path leading to the file.  The stat
structure includes info regarding device, inode (always 0 on Windows),
privilege mode, nlink (always 1 on Windows), user id (always 0 on
Windows), group id (always 0 on Windows), rdev (same as device on
Windows), size, last access time, last modification time, and creation
time.
<P>
If the file represented by <I>pathPtr</I> exists, the
<B>Tcl_FSStatProc</B> returns 0 and the stat structure is filled with
data.  Otherwise, -1 is returned, and no stat info is given.
<H3><A NAME="M21">ACCESSPROC</A></H3>
Function to process a <B>Tcl_FSAccess()</B> call.  Must be implemented for
any reasonable filesystem, since many Tcl level commands depend crucially 
upon it (e.g. <B><A HREF="../TclCmd/file.htm">file exists</A></B>, <B><A HREF="../TclCmd/file.htm">file readable</A></B>).
<P>
<PRE>typedef int Tcl_FSAccessProc(
	Tcl_Obj *<I>pathPtr</I>,
	int <I>mode</I>);</PRE>
<P>
The <B>Tcl_FSAccessProc</B> checks whether the process would be allowed
to read, write or test for existence of the file (or other file system
object) whose name is pathname.  If pathname is a symbolic link, then
permissions of the file referred by this symbolic link should be tested.
<P>
On success (all requested permissions granted), zero is returned.  On
error (at least one bit in mode asked for a permission that is denied,
or some other  error occurred), -1 is returned.
<P>
<H3><A NAME="M22">OPENFILECHANNELPROC</A></H3>
Function to process a <B>Tcl_FSOpenFileChannel()</B> call.  Must be
implemented for any reasonable filesystem, since any operations
which require open or accessing a file's contents will use it 
(e.g. <B><A HREF="../TclCmd/open.htm">open</A></B>, <B><A HREF="../TclCmd/encoding.htm">encoding</A></B>, and many Tk commands).
<P>
<PRE>typedef Tcl_Channel Tcl_FSOpenFileChannelProc(
	<A HREF="../TclLib/Interp.htm">Tcl_Interp</A> *<I>interp</I>,
	Tcl_Obj *<I>pathPtr</I>,
	int <I>mode</I>,
	int <I>permissions</I>);</PRE>
<P>
The <B>Tcl_FSOpenFileChannelProc</B> opens a file specified by
<I>pathPtr</I> and returns a channel handle that can be used to perform
input and output on the file.  This API is modeled after the <B>fopen</B>
procedure of the Unix standard I/O library.  The syntax and meaning of
all arguments is similar to those given in the Tcl <B><A HREF="../TclCmd/open.htm">open</A></B> command
when opening a file, where the <I>mode</I> argument is a combination of
the POSIX flags O_RDONLY, O_WRONLY, etc.  If an error occurs while
opening the channel, the <B>Tcl_FSOpenFileChannelProc</B> returns NULL and
records a POSIX error code that can be retrieved with <B><A HREF="../TclLib/SetErrno.htm">Tcl_GetErrno</A></B>.
In addition, if <I>interp</I> is non-NULL, the
<B>Tcl_FSOpenFileChannelProc</B> leaves an error message in <I>interp</I>'s
result after any error.
<P>
The newly created channel is not registered in the supplied
interpreter; to register it, use <B><A HREF="../TclLib/OpenFileChnl.htm">Tcl_RegisterChannel</A></B>. If one of
the standard channels, <B>stdin, stdout</B> or <B>stderr</B> was
previously closed, the act of creating the new channel also assigns it
as a replacement for the standard channel.
<H3><A NAME="M23">MATCHINDIRECTORYPROC</A></H3>
Function to process a <B>Tcl_FSMatchInDirectory()</B> call.  If not
implemented, then glob and recursive copy functionality will be lacking
in the filesystem (and this may impact commands like 'encoding names' 
which use glob functionality internally).
<P>
<PRE>typedef int Tcl_FSMatchInDirectoryProc(
	<A HREF="../TclLib/Interp.htm">Tcl_Interp</A>* <I>interp</I>, 
	Tcl_Obj *<I>result</I>,
	Tcl_Obj *<I>pathPtr</I>, 
	CONST char *<I>pattern</I>, 
	Tcl_GlobTypeData * <I>types</I>);</PRE>
<P>
The function should return all files or directories (or other filesystem
objects) which match the given pattern and accord with the <I>types</I>
specification given.  There are two ways in which this function may be
called.  If <I>pattern</I> is NULL, then <I>pathPtr</I> is a full path
specification of a single file or directory which should be checked for
existence and correct type.  Otherwise, <I>pathPtr</I> is a directory, the
contents of which the function should search for files or directories
which have the correct type.  In either case, <I>pathPtr</I> can be
assumed to be both non-NULL and non-empty.  It is not currently
documented whether <I>pathPtr</I> will have a file separator at its end of
not, so code should be flexible to both possibilities.
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the matching process.  Error messages are placed in interp, 
but on a TCL_OK result, the interpreter should not be modified, but
rather results should be added to the <I>result</I> object given
(which can be assumed to be a valid Tcl list).  The matches added
to <I>result</I> should include any path prefix given in <I>pathPtr</I> 
(this usually means they will be absolute path specifications). 
Note that if no matches are found, that simply leads to an empty 
result --- errors are only signaled for actual file or filesystem
problems which may occur during the matching process.
<H3><A NAME="M24">UTIMEPROC</A></H3>
Function to process a <B>Tcl_FSUtime()</B> call.  Required to allow setting
(not reading) of times with 'file mtime', 'file atime' and the
open-r/open-w/fcopy implementation of 'file copy'.
<P>
<PRE>typedef int Tcl_FSUtimeProc(
	Tcl_Obj *<I>pathPtr</I>, 
	struct utimbuf *<I>tval</I>);</PRE>
<P>
The access and modification times of the file specified by <I>pathPtr</I>
should be changed to the values given in the <I>tval</I> structure.
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the process.
<H3><A NAME="M25">LINKPROC</A></H3>
Function to process a <B>Tcl_FSLink()</B> call.  Should be implemented
only if the filesystem supports links, and may otherwise be NULL.
<P>
<PRE>typedef Tcl_Obj* Tcl_FSLinkProc(
	Tcl_Obj *<I>linkNamePtr</I>,
	Tcl_Obj *<I>toPtr</I>,
	int <I>linkAction</I>);</PRE>
<P>
If <I>toPtr</I> is NULL, the function is being asked to read the
contents of a link.  The result is a Tcl_Obj specifying the contents of
the link given by <I>linkNamePtr</I>, or NULL if the link could
not be read.  The result is owned by the caller, which should call
<A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A> when the result is no longer needed.  If <I>toPtr</I> 
is not NULL, the function should attempt to create a link.  The result
in this case should be <I>toPtr</I> if the link was successful and NULL
otherwise.  In this case the result is not owned by the caller. See
the documentation for <B>Tcl_FSLink</B> for the correct interpretation
of the <I>linkAction</I> flags.
<H3><A NAME="M26">LISTVOLUMESPROC</A></H3>
Function to list any filesystem volumes added by this filesystem.
Should be implemented only if the filesystem adds volumes at the head
of the filesystem, so that they can be returned by 'file volumes'.
<P>
<PRE>typedef Tcl_Obj* Tcl_FSListVolumesProc(void);</PRE>
<P>
The result should be a list of volumes added by this filesystem, or
NULL (or an empty list) if no volumes are provided.  The result object
is considered to be owned by the filesystem (not by Tcl's core), but
should be given a refCount for Tcl.  Tcl will use the contents of the
list and then decrement that refCount.  This allows filesystems to
choose whether they actually want to retain a 'master list' of volumes
or not (if not, they generate the list on the fly and pass it to Tcl
with a refCount of 1 and then forget about the list, if yes, then
they simply increment the refCount of their master list and pass it
to Tcl which will copy the contents and then decrement the count back
to where it was).
<P>
Therefore, Tcl considers return values from this proc to be read-only.
<P>
<H3><A NAME="M27">FILEATTRSTRINGSPROC</A></H3>
Function to list all attribute strings which are valid for this
filesystem.  If not implemented the filesystem will not support
the <B><A HREF="../TclCmd/file.htm">file attributes</A></B> command.  This allows arbitrary additional
information to be attached to files in the filesystem.  If it is
not implemented, there is no need to implement the <B>get</B> and <B><A HREF="../TclCmd/set.htm">set</A></B>
methods.
<P>
<PRE>typedef CONST char** Tcl_FSFileAttrStringsProc(
	Tcl_Obj *<I>pathPtr</I>, 
	Tcl_Obj** <I>objPtrRef</I>);</PRE>
<P>
The called function may either return an array of strings, or may
instead return NULL and place a Tcl list into the given objPtrRef.  Tcl
will take that list and first increment its refCount before using it.
On completion of that use, Tcl will decrement its refCount.  Hence if
the list should be disposed of by Tcl when done, it should have a
refCount of zero, and if the list should not be disposed of, the
filesystem should ensure it retains a refCount on the object.
<H3><A NAME="M28">FILEATTRSGETPROC</A></H3>
Function to process a <B>Tcl_FSFileAttrsGet()</B> call, used by 'file
attributes'.
<P>
<PRE>typedef int Tcl_FSFileAttrsGetProc(
	<A HREF="../TclLib/Interp.htm">Tcl_Interp</A> *<I>interp</I>,
	int <I>index</I>, 
	Tcl_Obj *<I>pathPtr</I>,
	Tcl_Obj **<I>objPtrRef</I>);</PRE>
<P>
Returns a standard Tcl return code.  The attribute value retrieved,
which corresponds to the <I>index</I>'th element in the list returned by
the Tcl_FSFileAttrStringsProc, is a Tcl_Obj placed in objPtrRef (if
TCL_OK was returned) and is likely to have a refCount of zero.  Either
way we must either store it somewhere (e.g. the Tcl result), or
Incr/Decr its refCount to ensure it is properly freed.
<H3><A NAME="M29">FILEATTRSSETPROC</A></H3>
Function to process a <B>Tcl_FSFileAttrsSet()</B> call, used by 'file
attributes'.  If the filesystem is read-only, there is no need
to implement this.
<P>
<PRE>typedef int Tcl_FSFileAttrsSetProc(
	<A HREF="../TclLib/Interp.htm">Tcl_Interp</A> *<I>interp</I>,
	int <I>index</I>, 
	Tcl_Obj *<I>pathPtr</I>,
	Tcl_Obj *<I>objPtr</I>);</PRE>
<P>
The attribute value of the <I>index</I>'th element in the list returned by
the Tcl_FSFileAttrStringsProc should be set to the <I>objPtr</I> given.
<H3><A NAME="M30">CREATEDIRECTORYPROC</A></H3>
Function to process a <B>Tcl_FSCreateDirectory()</B> call.  Should be
implemented unless the FS is read-only.
<P>
<PRE>typedef int Tcl_FSCreateDirectoryProc(
	Tcl_Obj *<I>pathPtr</I>);</PRE>
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the process.  If successful, a new directory should have
been added to the filesystem in the location specified by
<I>pathPtr</I>.
<H3><A NAME="M31">REMOVEDIRECTORYPROC</A></H3>
Function to process a 'Tcl_FSRemoveDirectory()' call.  Should be
implemented unless the FS is read-only.
<P>
<PRE>typedef int Tcl_FSRemoveDirectoryProc(
	Tcl_Obj *<I>pathPtr</I>,
	int <I>recursive</I>, 
	Tcl_Obj **<I>errorPtr</I>);</PRE>
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the process.  If successful, the directory specified by
<I>pathPtr</I> should have been removed from the filesystem.  If the
<I>recursive</I> flag is given, then a non-empty directory should
be deleted without error.  If an error does occur, the name of
the file or directory which caused the error should be placed in
<I>errorPtr</I>.
<H3><A NAME="M32">DELETEFILEPROC</A></H3>
Function to process a <B>Tcl_FSDeleteFile()</B> call.  Should be implemented
unless the FS is read-only.
<P>
<PRE>typedef int Tcl_FSDeleteFileProc(
	Tcl_Obj *<I>pathPtr</I>);</PRE>
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the process.  If successful, the file specified by
<I>pathPtr</I> should have been removed from the filesystem.  Note that,
if the filesystem supports symbolic links, Tcl will always call this
function and not Tcl_FSRemoveDirectoryProc when needed to delete them
(even if they are symbolic links to directories).
<H3><A NAME="M33">FILESYSTEM EFFICIENCY</A></H3>
<H3><A NAME="M34">LSTATPROC</A></H3>
Function to process a <B>Tcl_FSLstat()</B> call.  If not implemented, Tcl
will attempt to use the <I>statProc</I> defined above instead.  Therefore
it need only be implemented if a filesystem can differentiate between
<B>stat</B> and <B>lstat</B> calls.
<P>
<PRE>typedef int Tcl_FSLstatProc(
	Tcl_Obj *<I>pathPtr</I>, 
	Tcl_StatBuf *<I>statPtr</I>);</PRE>
<P>
The behavior of this function is very similar to that of the 
Tcl_FSStatProc defined above, except that if it is applied
to a symbolic link, it returns information about the link, not
about the target file.
<P>
<H3><A NAME="M35">COPYFILEPROC</A></H3>
Function to process a <B>Tcl_FSCopyFile()</B> call.  If not implemented Tcl
will fall back on open-r, open-w and fcopy as a copying mechanism.
Therefore it need only be implemented if the filesystem can perform
that action more efficiently.
<P>
<PRE>typedef int Tcl_FSCopyFileProc(
	Tcl_Obj *<I>srcPathPtr</I>,
	Tcl_Obj *<I>destPathPtr</I>);</PRE>
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the copying process.  Note that, <I>destPathPtr</I> is the
name of the file which should become the copy of <I>srcPathPtr</I>. It
is never the name of a directory into which <I>srcPathPtr</I> could be
copied (i.e. the function is much simpler than the Tcl level 'file
copy' subcommand).  Note that,
if the filesystem supports symbolic links, Tcl will always call this
function and not Tcl_FSCopyDirectoryProc when needed to copy them
(even if they are symbolic links to directories).
<H3><A NAME="M36">RENAMEFILEPROC</A></H3>
Function to process a <B>Tcl_FSRenameFile()</B> call.  If not implemented,
Tcl will fall back on a copy and delete mechanism.  Therefore it need
only be implemented if the filesystem can perform that action more
efficiently.
<P>
<PRE>typedef int Tcl_FSRenameFileProc(
	Tcl_Obj *<I>srcPathPtr</I>,
	Tcl_Obj *<I>destPathPtr</I>);</PRE>
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the renaming process.
<H3><A NAME="M37">COPYDIRECTORYPROC</A></H3>
Function to process a <B>Tcl_FSCopyDirectory()</B> call.  If not
implemented, Tcl will fall back on a recursive create-dir, file copy
mechanism.  Therefore it need only be implemented if the filesystem can
perform that action more efficiently.
<P>
<PRE>typedef int Tcl_FSCopyDirectoryProc(
	Tcl_Obj *<I>srcPathPtr</I>,
	Tcl_Obj *<I>destPathPtr</I>, 
	Tcl_Obj **<I>errorPtr</I>);</PRE>
<P>
The return value is a standard Tcl result indicating whether an error
occurred in the copying process.  If an error does occur, the name of
the file or directory which caused the error should be placed in
<I>errorPtr</I>. Note that, <I>destPathPtr</I> is the name of the
directory-name which should become the mirror-image of
<I>srcPathPtr</I>. It is not the name of a directory into which
<I>srcPathPtr</I> should be copied (i.e. the function is much simpler
than the Tcl level 'file copy' subcommand).
<H3><A NAME="M38">LOADFILEPROC</A></H3>
Function to process a <B>Tcl_FSLoadFile()</B> call.  If not implemented, Tcl
will fall back on a copy to native-temp followed by a Tcl_FSLoadFile on
that temporary copy.  Therefore it need only be implemented if the
filesystem can load code directly, or it can be implemented simply to
return TCL_ERROR to disable load functionality in this filesystem
entirely.
<P>
<PRE>typedef int Tcl_FSLoadFileProc(
	<A HREF="../TclLib/Interp.htm">Tcl_Interp</A> * <I>interp</I>, 
	Tcl_Obj *<I>pathPtr</I>, 
	Tcl_LoadHandle * <I>handlePtr</I>,
	Tcl_FSUnloadFileProc * <I>unloadProcPtr</I>);</PRE>
<P>
Returns a standard Tcl completion code.  If an error occurs, an error
message is left in the interp's result.  The function dynamically loads
a binary code file into memory.  On a successful
load, the <I>handlePtr</I> should be filled with a token for 
the dynamically loaded file, and the <I>unloadProcPtr</I> should be
filled in with the address of a procedure.  The procedure will be
called with the given Tcl_LoadHandle as its only parameter when Tcl 
needs to unload the file.
<H3><A NAME="M39">UNLOADFILEPROC</A></H3>
Function to unload a previously successfully loaded file.  If load was
implemented, then this should also be implemented, if there is any
cleanup action required.
<P>
<PRE>typedef void Tcl_FSUnloadFileProc(
	Tcl_LoadHandle <I>loadHandle</I>);</PRE>
<H3><A NAME="M40">GETCWDPROC</A></H3>
Function to process a <B>Tcl_FSGetCwd()</B> call.  Most filesystems need not
implement this.  It will usually only be called once, if 'getcwd' is
called before 'chdir'.  May be NULL.
<P>
<PRE>typedef Tcl_Obj* Tcl_FSGetCwdProc(
	<A HREF="../TclLib/Interp.htm">Tcl_Interp</A> *<I>interp</I>);</PRE>
<P>
If the filesystem supports a native notion of a current working
directory (which might perhaps change independent of Tcl), this
function should return that cwd as the result, or NULL if the current
directory could not be determined (e.g. the user does not have
appropriate permissions on the cwd directory).  If NULL is returned, an
error message is left in the interp's result.
<P>
<H3><A NAME="M41">CHDIRPROC</A></H3>
Function to process a <B>Tcl_FSChdir()</B> call.  If filesystems do not
implement this, it will be emulated by a series of directory access
checks.  Otherwise, virtual filesystems which do implement it need only
respond with a positive return result if the dirName is a valid,
accessible directory in their filesystem.  They need not remember the
result, since that will be automatically remembered for use by GetCwd.
Real filesystems should carry out the correct action (i.e. call the
correct system 'chdir' api).
<P>
<PRE>typedef int Tcl_FSChdirProc(
	Tcl_Obj *<I>pathPtr</I>);</PRE>
<P>
The <B>Tcl_FSChdirProc</B> changes the applications current working
directory to the value specified in <I>pathPtr</I>. The function returns
-1 on error or 0 on success.
<H3><A NAME="M42">KEYWORDS</A></H3>
<A href="../Keywords/S.htm#stat access filesystem vfs">stat access filesystem vfs</A>
<HR><PRE>
<A HREF="../copyright.htm">Copyright</A> &#169; 2001 Vincent Darley
<A HREF="../copyright.htm">Copyright</A> &#169; 1995-1997 Roger E. Critchlow Jr.</PRE>
</BODY></HTML>
